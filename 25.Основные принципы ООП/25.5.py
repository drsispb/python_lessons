'''Задача 5. Стек
Что нужно сделать
Мы уже говорили, что в программировании нередко необходимо создавать свои собственные структуры данных на
основе уже существующих. Одной из таких базовых структур является стек.

Стек — это абстрактный тип данных, представляющий собой список элементов, организованных по принципу LIFO
(англ. last in — first out, «последним пришёл — первым вышел»).

Простой пример: стек из книг на столе. Единственной книгой, обложка которой видна, является самая верхняя.
Чтобы получить доступ, например, к третьей снизу книге, нам нужно убрать все книги, лежащие сверху, одну за другой.

Напишите класс, который реализует стек и его возможности (достаточно будет добавления и удаления элемента).

После этого напишите ещё один класс — «Менеджер задач». В менеджере задач можно выполнить команду «новая задача»,
в которую передаётся сама задача (str) и её приоритет (int). Сам менеджер работает на основе стека (не наследование).
При выводе менеджера в консоль все задачи должны быть отсортированы по следующему приоритету: чем меньше число,
тем выше задача.

Вот пример основной программы:

manager = TaskManager()
manager.new_task("сделать уборку", 4)
manager.new_task("помыть посуду", 4)
manager.new_task("отдохнуть", 1)
manager.new_task("поесть", 2)
manager.new_task("сдать ДЗ", 2)
print(manager)
Результат:

1 — отдохнуть

2 — поесть; сдать ДЗ

4 — сделать уборку; помыть посуду

Дополнительно: реализуйте также удаление задач и подумайте, что делать с дубликатами.'''

class Stek():
    '''создаем класс стек, как требует задание. реализуем добление и удаление элементов'''
    def __init__(self):
        self.items = []

    def __str__(self):
        return str(", ".join(self.items))
    '''метод для добавления'''
    def append(self, item):
        self.items.append(item)
    '''метод для удаления, '''
    def pop(self):
        if len(self.items) == 0:
            return None
        removed = self.items.pop()
        return removed

class TaskManager():
    '''создаем класс, для приема задач'''
    def __init__(self):
        self.task = {}

    def __str__(self):
        string = ""
        for elem in sorted(self.task.keys()):
            string += str(elem) + " " + str(self.task[elem]) + ";\n"
        return string

    '''реализуем метод для принятия ранга и названия задачи'''
    def new_task(self, task, rank):
        if not rank in self.task.keys():
            '''проверяем есть ли уже такой ранг, если нет добавляем его'''
            self.task[rank] = Stek()
            self.task[rank].append(task)
        else:
            '''если есть, создаем новый экземпляр класса стек и проводим проверку по рангу и вставляем в нужное нам место задачу '''
            new_stack = Stek()
            while len(str(self.task[rank])) != 0:
                value = self.task[rank].pop()
                if value != task:
                    new_stack.append(value)
            new_stack.append(task)
            self.task[rank] = new_stack

manager = TaskManager()
manager.new_task("сделать уборку", 4)
manager.new_task("помыть посуду", 4)
manager.new_task("отдохнуть", 1)
manager.new_task("поесть", 2)
manager.new_task("сдать ДЗ", 2)
print(manager)