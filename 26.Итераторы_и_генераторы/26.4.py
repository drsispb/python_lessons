'''Задача 4. Односвязный список
Что нужно сделать
Мы продолжаем тему структур данных и алгоритмов. И в этот раз вам нужно реализовать односвязный список.

Связный список — это структура данных, которая состоит из элементов, называющихся узлами. В узлах хранятся данные,
а между собой узлы соединены связями. Связь — это ссылка на следующий или предыдущий элемент списка.
В односвязном списке связь — это ссылка только на следующий элемент, то есть в нём можно передвигаться только
в сторону конца списка. Узнать адрес предыдущего элемента, опираясь на содержимое текущего узла, невозможно.

Реализуйте такую структуру данных без использования стандартных структур Python (list, dict, tuple и прочие) и
дополнительных модулей.

Для реализации напишите два класса: Node и LinkedList. В Node должна быть логика работы одного узла
(хранение данных и указателя).

Для структуры реализуйте следующие методы:

append — добавление элемента в конец списка;
get — получение элемента по индексу;
remove — удаление элемента по индексу.
Дополнительно: сделайте так, чтобы по списку можно было итерироваться с помощью цикла.

Пример основной программы:
my_list = LinkedList()
my_list.append(10)
my_list.append(20)
my_list.append(30)
print('Текущий список:', my_list)
print('Получение третьего элемента:', my_list.get(2))
print('Удаление второго элемента.')
my_list.remove(1)
print('Новый список:', my_list)

Результат:
Текущий список: [10 20 30]
Получение третьего элемента: 30
Удаление второго элемента.
Новый список: [10 30]'''

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
class LinkedList:
    def __init__(self):
        self.start_num = None

    def append(self, new_num):
        new_data = Node(new_num)
        if self.start_num is None:
            self.start_num = new_num
            return
        last_data = self.start_num
        while (last_data.next):
            last_data = last_data.next
        last_data.next = new_data




my_list = LinkedList()
my_list.append(10)
my_list.append(20)
my_list.append(30)
print('Текущий список:', my_list)
# print('Получение третьего элемента:', my_list.get(2))
# print('Удаление второго элемента.')
# my_list.remove(1)
# print('Новый список:', my_list)